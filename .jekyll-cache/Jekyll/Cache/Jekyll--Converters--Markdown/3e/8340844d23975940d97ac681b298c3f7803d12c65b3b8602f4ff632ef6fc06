I"<p>我个人感觉rspec的风格比rails自带项目的test好用一些，更符合我的口味。在这里记录一下rspec的搭建方法，说是搭建，其实没有那么烦琐，就是一些工具的组合起来，这样测试更方便，效率更高。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># in Gemfile</span>
<span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"rspec-rails"</span><span class="p">,</span> <span class="s2">"~&gt; 2.5.0"</span>
  <span class="n">gem</span> <span class="s1">'shoulda-matchers'</span><span class="p">,</span> <span class="s2">"1.0.0.beta1"</span>
  <span class="n">gem</span> <span class="s1">'factory_girl_rails'</span><span class="p">,</span> <span class="s2">"1.0.1"</span>
<span class="k">end</span></code></pre></figure>

<p>然后bundle install,
然后rails g rspec:install
然后你可以将默认的test目录删除掉。</p>

<p>然后，rails g controller pages test来试试，现在生成的测试代码再也不是原来的unit test代码了，是用了新的rspec了。</p>

<p>rspec2将rails项目中的测试分为几块：
controllers
models
helpers
lib
views
requests
routing</p>

<p>划分得蛮细的，每一部分测试相对应的代码。</p>
:ET